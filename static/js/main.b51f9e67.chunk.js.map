{"version":3,"sources":["serviceWorker.js","StarMatch.js","index.js"],"names":["Boolean","window","location","hostname","match","StarsDisplay","props","utils","range","count","map","starId","key","className","PlayAgain","onClick","PlayNumber","style","backgroundColor","colors","status","number","StarMatch","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","candidatesAreWrong","sum","gameIsDone","length","onNumberClick","currentStatus","newCandidateNums","concat","filter","cn","newAvailableNums","n","includes","randomSumIn","numberId","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b51f9e67.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// STAR MATCH - Starting Template\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nconst StarsDisplay = (props) => (\r\n  <>\r\n    {utils.range(1, props.count).map((starId) => (\r\n      <div key={starId} className=\"star\" />\r\n    ))}\r\n  </>\r\n);\r\n\r\nconst PlayAgain = (props) => (\r\n  <div className=\"game-done\">\r\n    <button onClick={props.onClick}>Play Again</button>\r\n  </div>\r\n);\r\n\r\nconst PlayNumber = (props) => (\r\n  <button\r\n    className=\"number\"\r\n    style={{ backgroundColor: colors[props.status] }}\r\n    onClick={() => props.onClick(props.number, props.status)}\r\n  >\r\n    {props.number}\r\n  </button>\r\n);\r\n\r\nexport const StarMatch = () => {\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const numbers = 9;\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n\r\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n  const gameIsDone = availableNums.length === 0;\r\n\r\n  const resetGame = () => {\r\n    setStars(utils.random(1, 9));\r\n    setAvailableNums(utils.range(1, 9));\r\n    setCandidateNums([]);\r\n  };\r\n  const numberStatus = (number) => {\r\n    if (!availableNums.includes(number)) {\r\n      return \"used\";\r\n    }\r\n    if (candidateNums.includes(number)) {\r\n      return candidatesAreWrong ? \"Wrong\" : \"candidate\";\r\n    }\r\n    return \"available\";\r\n  };\r\n\r\n  const onNumberClick = (number, currentStatus) => {\r\n    if (currentStatus === \"used\") {\r\n      return;\r\n    }\r\n    //candidateNums\r\n    const newCandidateNums =\r\n      currentStatus == \"available\"\r\n        ? candidateNums.concat(number)\r\n        : candidateNums.filter((cn) => cn !== number);\r\n\r\n    if (utils.sum(newCandidateNums) != stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        (n) => !newCandidateNums.includes(n)\r\n      );\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        Pick 1 or more numbers that sum to the number of stars\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {gameIsDone ? (\r\n            <PlayAgain onClick={resetGame} />\r\n          ) : (\r\n            <StarsDisplay count={stars} />\r\n          )}\r\n        </div>\r\n        <div className=\"right\">\r\n          {utils.range(1, numbers).map((numberId) => (\r\n            <PlayNumber\r\n              key={numberId}\r\n              number={numberId}\r\n              status={numberStatus(numberId)}\r\n              onClick={onNumberClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Color Theme\r\nconst colors = {\r\n  available: \"lightgray\",\r\n  used: \"lightgreen\",\r\n  wrong: \"lightcoral\",\r\n  candidate: \"deepskyblue\",\r\n};\r\n\r\n// Math science\r\nconst utils = {\r\n  // Sum an array\r\n  sum: (arr) => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StarMatch } from \"./StarMatch\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StarMatch />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}